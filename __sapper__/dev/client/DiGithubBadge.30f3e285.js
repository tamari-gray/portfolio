import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, A as create_slot, h as svg_element, u as text, j as claim_element, k as children, w as claim_text, l as detach_dev, p as add_location, q as insert_dev, z as append_dev, E as set_data_dev, F as empty, o as attr_dev, B as get_slot_changes, C as get_slot_context, t as transition_in, c as transition_out, a as assign, e as exclude_internal_props, m as mount_component, g as get_spread_update, b as get_spread_object, f as destroy_component } from './index.5d4a6033.js';

/* node_modules/svelte-icons/components/IconBase.svelte generated by Svelte v3.12.1 */

const file = "node_modules/svelte-icons/components/IconBase.svelte";

// (19:2) {#if title}
function create_if_block(ctx) {
	var title_1, t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(ctx.title);
			this.h();
		},

		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, true);
			var title_1_nodes = children(title_1);

			t = claim_text(title_1_nodes, ctx.title);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(title_1, file, 19, 4, 912);
		},

		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},

		p: function update(changed, ctx) {
			if (changed.title) {
				set_data_dev(t, ctx.title);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(title_1);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_if_block.name, type: "if", source: "(19:2) {#if title}", ctx });
	return block;
}

function create_fragment(ctx) {
	var svg, if_block_anchor, current;

	var if_block = (ctx.title) && create_if_block(ctx);

	const default_slot_template = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_template, ctx, null);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			if_block_anchor = empty();

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			svg = claim_element(nodes, "svg", { xmlns: true, viewBox: true, class: true }, true);
			var svg_nodes = children(svg);

			if (if_block) if_block.l(svg_nodes);
			if_block_anchor = empty();

			if (default_slot) default_slot.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", ctx.viewBox);
			attr_dev(svg, "class", "svelte-1b3s8r4");
			add_location(svg, file, 17, 0, 843);
		},

		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append_dev(svg, if_block_anchor);

			if (default_slot) {
				default_slot.m(svg, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.title) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(svg, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(
					get_slot_changes(default_slot_template, ctx, changed, null),
					get_slot_context(default_slot_template, ctx, null)
				);
			}

			if (!current || changed.viewBox) {
				attr_dev(svg, "viewBox", ctx.viewBox);
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(svg);
			}

			if (if_block) if_block.d();

			if (default_slot) default_slot.d(detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { title = null, viewBox } = $$props;

	const writable_props = ['title', 'viewBox'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<IconBase> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('viewBox' in $$props) $$invalidate('viewBox', viewBox = $$props.viewBox);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return { title, viewBox };
	};

	$$self.$inject_state = $$props => {
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('viewBox' in $$props) $$invalidate('viewBox', viewBox = $$props.viewBox);
	};

	return { title, viewBox, $$slots, $$scope };
}

class IconBase extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["title", "viewBox"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "IconBase", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.viewBox === undefined && !('viewBox' in props)) {
			console.warn("<IconBase> was created without expected prop 'viewBox'");
		}
	}

	get title() {
		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get viewBox() {
		throw new Error("<IconBase>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewBox(value) {
		throw new Error("<IconBase>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/svelte-icons/di/DiGithubBadge.svelte generated by Svelte v3.12.1 */

const file$1 = "node_modules/svelte-icons/di/DiGithubBadge.svelte";

// (4:8) <IconBase viewBox="0 0 32 32" {...$$props}>
function create_default_slot(ctx) {
	var path;

	const block = {
		c: function create() {
			path = svg_element("path");
			this.h();
		},

		l: function claim(nodes) {
			path = claim_element(nodes, "path", { d: true }, true);
			var path_nodes = children(path);

			path_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(path, "d", "M16 5.343c-6.196 0-11.219 5.023-11.219 11.219 0 4.957 3.214 9.162 7.673 10.645 0.561 0.103 0.766-0.244 0.766-0.54 0-0.267-0.010-1.152-0.016-2.088-3.12 0.678-3.779-1.323-3.779-1.323-0.511-1.296-1.246-1.641-1.246-1.641-1.020-0.696 0.077-0.682 0.077-0.682 1.126 0.078 1.72 1.156 1.72 1.156 1.001 1.715 2.627 1.219 3.265 0.931 0.102-0.723 0.392-1.219 0.712-1.498-2.49-0.283-5.11-1.246-5.11-5.545 0-1.226 0.438-2.225 1.154-3.011-0.114-0.285-0.501-1.426 0.111-2.97 0 0 0.941-0.301 3.085 1.15 0.894-0.25 1.854-0.373 2.807-0.377 0.953 0.004 1.913 0.129 2.809 0.379 2.14-1.453 3.083-1.15 3.083-1.15 0.613 1.545 0.227 2.685 0.112 2.969 0.719 0.785 1.153 1.785 1.153 3.011 0 4.31-2.624 5.259-5.123 5.537 0.404 0.348 0.761 1.030 0.761 2.076 0 1.5-0.015 2.709-0.015 3.079 0 0.299 0.204 0.648 0.772 0.538 4.455-1.486 7.666-5.69 7.666-10.645 0-6.195-5.023-11.219-11.219-11.219z");
			add_location(path, file$1, 4, 10, 151);
		},

		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(path);
			}
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_default_slot.name, type: "slot", source: "(4:8) <IconBase viewBox=\"0 0 32 32\" {...$$props}>", ctx });
	return block;
}

function create_fragment$1(ctx) {
	var current;

	var iconbase_spread_levels = [
		{ viewBox: "0 0 32 32" },
		ctx.$$props
	];

	let iconbase_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};
	for (var i = 0; i < iconbase_spread_levels.length; i += 1) {
		iconbase_props = assign(iconbase_props, iconbase_spread_levels[i]);
	}
	var iconbase = new IconBase({ props: iconbase_props, $$inline: true });

	const block = {
		c: function create() {
			iconbase.$$.fragment.c();
		},

		l: function claim(nodes) {
			iconbase.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(iconbase, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var iconbase_changes = (changed.$$props) ? get_spread_update(iconbase_spread_levels, [
									iconbase_spread_levels[0],
			get_spread_object(ctx.$$props)
								]) : {};
			if (changed.$$scope) iconbase_changes.$$scope = { changed, ctx };
			iconbase.$set(iconbase_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(iconbase.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(iconbase.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(iconbase, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
	};

	$$self.$capture_state = () => {
		return {  };
	};

	$$self.$inject_state = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
	};

	return {
		$$props,
		$$props: $$props = exclude_internal_props($$props)
	};
}

class DiGithubBadge extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "DiGithubBadge", options, id: create_fragment$1.name });
	}
}

export { DiGithubBadge as D, IconBase as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlHaXRodWJCYWRnZS4zMGYzZTI4NS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS1pY29ucy9jb21wb25lbnRzL0ljb25CYXNlLnN2ZWx0ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtaWNvbnMvZGkvRGlHaXRodWJCYWRnZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCB0aXRsZSA9IG51bGw7XG4gIGV4cG9ydCBsZXQgdmlld0JveDtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIHN2ZyB7XG4gICAgc3Ryb2tlOiBjdXJyZW50Q29sb3I7XG4gICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgIHN0cm9rZS13aWR0aDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgbWF4LWhlaWdodDogMTAwJTtcbiAgfSAgXG48L3N0eWxlPlxuXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB7dmlld0JveH0+XG4gIHsjaWYgdGl0bGV9XG4gICAgPHRpdGxlPnt0aXRsZX08L3RpdGxlPlxuICB7L2lmfVxuICA8c2xvdCAvPlxuPC9zdmc+XG4iLCI8c2NyaXB0PlxuICAgICAgICBpbXBvcnQgSWNvbkJhc2UgZnJvbSAnLi4vY29tcG9uZW50cy9JY29uQmFzZS5zdmVsdGUnO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPEljb25CYXNlIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiB7Li4uJCRwcm9wc30+XG4gICAgICAgICAgPHBhdGggZD1cIk0xNiA1LjM0M2MtNi4xOTYgMC0xMS4yMTkgNS4wMjMtMTEuMjE5IDExLjIxOSAwIDQuOTU3IDMuMjE0IDkuMTYyIDcuNjczIDEwLjY0NSAwLjU2MSAwLjEwMyAwLjc2Ni0wLjI0NCAwLjc2Ni0wLjU0IDAtMC4yNjctMC4wMTAtMS4xNTItMC4wMTYtMi4wODgtMy4xMiAwLjY3OC0zLjc3OS0xLjMyMy0zLjc3OS0xLjMyMy0wLjUxMS0xLjI5Ni0xLjI0Ni0xLjY0MS0xLjI0Ni0xLjY0MS0xLjAyMC0wLjY5NiAwLjA3Ny0wLjY4MiAwLjA3Ny0wLjY4MiAxLjEyNiAwLjA3OCAxLjcyIDEuMTU2IDEuNzIgMS4xNTYgMS4wMDEgMS43MTUgMi42MjcgMS4yMTkgMy4yNjUgMC45MzEgMC4xMDItMC43MjMgMC4zOTItMS4yMTkgMC43MTItMS40OTgtMi40OS0wLjI4My01LjExLTEuMjQ2LTUuMTEtNS41NDUgMC0xLjIyNiAwLjQzOC0yLjIyNSAxLjE1NC0zLjAxMS0wLjExNC0wLjI4NS0wLjUwMS0xLjQyNiAwLjExMS0yLjk3IDAgMCAwLjk0MS0wLjMwMSAzLjA4NSAxLjE1IDAuODk0LTAuMjUgMS44NTQtMC4zNzMgMi44MDctMC4zNzcgMC45NTMgMC4wMDQgMS45MTMgMC4xMjkgMi44MDkgMC4zNzkgMi4xNC0xLjQ1MyAzLjA4My0xLjE1IDMuMDgzLTEuMTUgMC42MTMgMS41NDUgMC4yMjcgMi42ODUgMC4xMTIgMi45NjkgMC43MTkgMC43ODUgMS4xNTMgMS43ODUgMS4xNTMgMy4wMTEgMCA0LjMxLTIuNjI0IDUuMjU5LTUuMTIzIDUuNTM3IDAuNDA0IDAuMzQ4IDAuNzYxIDEuMDMwIDAuNzYxIDIuMDc2IDAgMS41LTAuMDE1IDIuNzA5LTAuMDE1IDMuMDc5IDAgMC4yOTkgMC4yMDQgMC42NDggMC43NzIgMC41MzggNC40NTUtMS40ODYgNy42NjYtNS42OSA3LjY2Ni0xMC42NDUgMC02LjE5NS01LjAyMy0xMS4yMTktMTEuMjE5LTExLjIxOXpcIiAvPlxuICAgICAgICA8L0ljb25CYXNlPlxuICAgICAgIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0JBbUJZLEtBQUs7Ozs7Ozs7O3FDQUFMLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUwsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBRFYsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBRDZCLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7OztXQUN6QyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBRDZCLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWhCdkMsTUFBSSxLQUFLLEdBQUcsSUFBSSxFQUNaLG1CQUFPLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNDcUIsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBQVAsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
